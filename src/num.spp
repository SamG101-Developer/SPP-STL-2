mod std::num;

use std::vec::Vec;
use std::cmp::PartOrd;
use std::alg::Alg;


cls Num {
    real_part: InnerNum;
    imag_part: InnerNum;
}

sup Num {
    fn copy_real(self: &Self) -> Num {
        let real_part = self.real_part.copy();
        ret Num{real_part, imag_part=InnerNum::new()};
    }

    fn copy_imag(self: &Self) -> Num {
        let imag_part = self.imag_part.copy();
        ret Num{real_part=InnerNum::new(), imag_part};
    }

    fn is_complex(self: &Self) -> Bool {
        ret self.imag_part.is_zero();
    }

    fn is_zero(self: &Self) -> Bool {
        ret self.real_part.is_zero() && self.imag_part.is_zero();
    }
}


sup ops::Add for Num {
    fn __add__(self: &Self, that: Self) -> Self {
        let real_part = self.real_part + that.real_part;
        let imag_part = self.imag_part + that.imag_part;
        ret Self{real_part, imag_part};
    }
}

sup ops::AddAssign for Num {
    fn __add_assign__(self: &Self, that: Self) -> Void {
        self.real_part += that.real_part;
        self.imag_part += that.imag_part;
    }
}


cls InnerNum {
    mut int_part: Vec[SingleDigitT];
    mut dec_part: Vec[SingleDigitT];
    is_imag: Bool;
    base: cU32;
}

sup InnerNum {
    use SingleDigitT as cU32;
    use DoubleDigitT as cU64;
}
