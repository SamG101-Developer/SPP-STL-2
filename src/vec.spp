mod std::vec;

use std::alloc::Allocator;
use std::num::Num;
use std::mem_seq::MemSeq;


cls Vec[T, A: Allocator] {
    """
    A vector is a collection of contiguously stored elements in memory. It wraps a fixed size MemSeq[T] object, and
    will reallocate its size as necessary.
      - len: number of elements in the vector
      - cap: total capacity the current MemSeq can store
      - data: MemSeq object storing contiguous elements
    """
    len: Num;
    cap: Num;
    data: MemSeq[T];
}


sup[T, A: Allocator = Allocator[T]] Vec[T, A] {
    @meta::static_method
    fn new() -> Vec[T, A] {
        """
        Create a new empty vector, with length and capacity set to 0, and the data set to an empty memory sequence.
        """
        let data = A::allocate(0);
        ret Vec[T, A]{len= 0, cap= 0, data};
    }

    @meta::static_method
    fn new(...elements: T) -> Vec[T, A] {
        """
        Create a new vector with a number of elements already in the vector. Reserve the exact amount of elements
        requried, and emplace them all to the tail.
        """
        let vec = Vec[T, A]::new(); # TODO
        vec.reserve(elements.len);
        vec.emplace_tail(elements);
        ret vec;
    }

    @meta::virtual_method
    fn reserve(self: &mut Self, n: Num) -> Void {
        self.cap += n;
        A::reallocate(&mut self.data, self.cap);
    }

    @meta::virtual_method
    fn reserve_auto(self: &mut Self) -> Void {
        self.reserve(self.cap.copy());
    }

    @meta::virtual_method
    fn shrink_to(self: &mut Self, n: Num) -> Void {
        self.cap = if n == { -1 => self.len.copy(); else => n; };
        A::reallocate(&mut self.data, self.cap);
    }

    @meta::virtual_method
    fn shrink_auto(self: &mut Self) -> Void {
        self.shrink_to(-1);
    }
}


sup[T, A: Allocator=Allocator[T]] Vec[T, A] {}


sup[T] Iterable[T] for Vec[T] {
    fn iter(self: Self) -> Gen[T] {
        let i = -1;
        while (i += 1) < self.len {
            let item = self.data.take(i);
            yield item;
        };
        ret;
    }

    fn iter_ref(self: &Self) -> Gen[Ref[T]] {
        """
        To iterate items as immutable references, take each element from the internal memory sequence, and yield the
        immutable reference out to the generator. Once the reference has been processed outside the function, the
        generator's 'next()' method will be called, releasing control of the reference back to this method. Full control
        of the element has been given back to the Vec, so it can be replaced back into the internal memory sequence.
        """

        let i = -1;
        while (i += 1) < self.len {
            let item = self.data.take(i);
            yield &item;
            self.data.set(i, item);
        };
        ret;
    }

    fn iter_mut(self: &mut Self) -> Gen[Mut[T]] {
        """
        To iterate items as mutable references, take each element from the internal memory sequence, and yield the
        mutable reference out to the generator. Once the reference has been processed outside the function, the
        generator's 'next()' method will be called, releasing control of the reference back to this method. Full control
        of the element has been given back to the Vec, so it can be replaced back into the internal memory sequence.
        """

        let i = -1;
        while (i += 1) < self.len {
            let item = self.data.take(i);
            yield &mut item;
            self.data.set(i, item);
        };
        ret;
    }
}

