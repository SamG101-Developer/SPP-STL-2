mod std::collections;

use std::allocator::Allocator;
use std::manipulator::Manipulator;
use std::num::Num;


cls Iterable[T] {}
sup[T] Iterable[T] {
    @meta::abstract_method
    fn iter(self: &Self) -> Iter[Self, T] {}

    @mets::abstract_method
    fn iter_mut(self: &mut Self) -> Iter[Self, T] {}
}


cls Collection[T, A: Alloc] { mut len: Num; }
sup[T, A: Allocator] Collection[T, A] {
    """
    Basic types for an astract collection
      - `ValueType` => the type of object being contained in the collection (owned or a reference)
      - `AllocType` => the type of allocator being used to allocate new elements of type T
    """
    use ValueType as T;
    use AllocType as A;

    @meta::virtual_method
    fn length(self: &Self) -> Num {
        """
        Standard length() method used to get the length of the collection. A method is defined so that if the length
        must be determined algorithmically, and not by using self.length, then this is possible. The default
        implementation is to access the length with self.length, an O(1) operation.
        """
        ret self.len.copy();
    }

    @meta::virtual_method
    fn is_empty(self: &Self) -> Bool {
        """
        The is_empty() method is used to check is a collection is an empty collection. An empty collection is a
        collection containing 0 elements. The default implementation is to check self.length against 0, but this can be
        overriden for if self.length is used to get the length, or if there is a different algorothm desired to be used.
        """
        ret self.len.is_zero();
    }

    @meta::virtual_method
    fn clear(self: &mut Self) -> Void {
        """
        The clear() method is used to clear a collection of all its elements. This will almost always have to be
        re-implemented, unless the derived class is also abstract. The default implementation is to set the self.length
        to 0, and do nothing else.
        """
        ret self.len.set_zero();
    }
}


cls Seq[T, A: Alloc] {}

sup[T, A: Alloc] Seq {
    @meta::abstract_method
    fn emplace_head(self: &mut Self, item: T) -> Ret[Void, MemErr] {
        """
        The emplace_head(T) method adds a new element to the beginning of the sequence. This is generally implemented as
        a wrapper to inserting at the 0th index. However, in certain collections, ie Deque[T], there are more
        optimal ways to insert at the beginning of the collection.
        """
    }

    @meta::abstract_method
    fn emplace_tail(self: &mut Self, item: T) -> Ret[Void, MemErr] {
        """
        The emplace_tail(T) method adds a new element to the end of the sequence. This normally has a more optimal
        implementation as a special-case optimization, for example in Vec[T], the end-insertion required no
        shfiting compared to the insert(T, Num) method.
        """
    }

    @meta::abstract_method
    fn emplace(self: &mut Self, item: T) -> Ret[Void, MemErr] {
        """
        The emplace(T, Num) method adds a new element into the middle of a sequence -- random insertion. This is
        generally the most suboptimal insertion method for a sequence because of element shifting.
        """
    }

    @meta::abstract_method
    fn pop_head(self: &mut Self) -> Opt[T] {
        """
        The pop_head() method removes the first element from the sequence, and returns it. The return value is an
        Opt[T], because if the sequence is empty, nothing can be returned. Popping the head can have more optimal
        implementations than the general pop(Num) -- see Deque.
        """
    }

    @meta::abstract_method
    fn pop_tail(self: &mut Self) -> Opt[T] {
        """
        The pop_tail() method removes the final element from the sequence, and returns it. The return value is an
        Opt[T], because if the sequence is empty, nothing can be returned. Popping the head can have more optimal
        implementations than the general pop(Num) -- see Deque.
        """
    }

    @meta::abstract_method
    fn pop(self: &mut Self, index: Num) -> Opt[T] {
        """
        The pop(Num) method removes the nth element from the sequence, and returns it. The return value is an
        Opt[T], because if the sequence is empty, nothing can be returned. This is the general method to remove an
        item from the middle of a sequence.
        """
    }

    @meta::abstract_method
    gn at_head(self: &Self) -> Gen[Ret[Ref[T], IndexErr]] {
        """
        The with_head(Fn[U, (T)]) method allows indexing specifically at the beginning of the sequence. References
        cannot be returned, so reading the value and its attributes is required inside a callback.
        """
    }

    @meta::abstract_method
    gn at_tail(self: &Self) -> Gen[Ret[Ref[T], IndexErr]] {
        """
        The with_tail(Fn[U, (T)]) method allows indexing specifically at the beginning of the sequence. References
        cannot be returned, so reading the value and its attributes is required inside a callback.
        """
    }

    @meta::abstract_method
    gn at_n(self: &Self) -> Gen[Ret[Ref[T], IndexErr]] {
        """
        The with_n(Fn[U, (T)]) method allows indexing at specific indexes in the sequence. References cannot be
        returned, so reading the value and its attributes is required inside a callback.
        """
    }
}
