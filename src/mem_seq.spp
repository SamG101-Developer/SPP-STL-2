mod std::mem_seq;

use std::c::cstd;


cls MemSeq[T, M: Manip = Manip] {
    arr: C::c_arr[T];
}


sup[T, M: Manip] MemSeq[T, M] {
    @meta::static_method
    fn new() -> Self { ret MemSeq[T]{""" TODO """}; }

    @meta::static_method
    fn new_sized(size: Num) -> Self { ret MemSeq[T]{""" TODO """}; }

    gn get[U](self: &Self, n: Num) -> Gen[Ret[Ref[T], MemErr]] {
        obj = self.take(n);
        yield &obj;
        self.set(n, obj);
        ret;
    }

    fn take(self: &Self, n: Num) -> Ret[T, MemErr] {
        let result: T;
        M::move(&mut result, 0, &mut self.arr, index, std::size_of[T]());
        ret std::pass(result);
    }

    fn set(self: &mut Self, n: Num, obj: T) -> Ret[Void, MemErr] {
        M::move(&mut self.arr, index, item, 0, std::size_of[T]());
        ret std::pass();
    }

    fn del(self: &mut Self, n: Num) -> Ret[T, MemErr] {
        let result: T;
        M::move(&mut result, 0, &mut self.array, index, std::size_of[T]());
    }
}
