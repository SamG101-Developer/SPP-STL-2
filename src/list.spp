mod std::list;

use std::collections::Seq;
use std::manipulator::Manipulator;
use std::mem_seq::MemSeq;


# @meta::private(friends=(List[T])) TODO
cls ListNode[T] {
    inner: T;
    next: Opt[ListNode[T]];
}


cls List[T] {
    head: ListNode[T];
}


sup[T] Seq[T] for List[T] {
    fn emplace_head(self: &mut Self, item: T) -> Ret[Void, MemErr] {
        let new_node = ListNode{inner=item};
        if self.is_empty() == {
            true => self.head = new_node;
            else => self.head, new_node.next = (new_node, self.head);
        };
    }

    fn emplace_tail(self: &mut Self, item: T) -> Ret[void, MemErr] {
        let new_node = ListNode{inner=item};
        if self.is_empty() == {
            true => self.head = new_node;
            else => self.tail.next = std::some(new_node);
        };
    }
}
