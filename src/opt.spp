mod std::opt;


fn pass[T](val: T) -> Opt[T] {
    ret Opt{ val=Vec::new(val) };
}

fn fail[T](val: T) -> Opt[T] {
    ret Opt{ val=Vec::new() };
}


@meta::public(friends=(pass, fail))
cls Opt[T] {
    val: Vec[T];
}


sup[T] Opt[T] {
    @meta::public use ValueType as T;

    fn is_some(self: &Self) -> Bool {
        ret self.val.is_empty().not();
    }

    fn is_some_and(self: Self, func: FnOnce[Bool, (T)]) -> Bool {
        ret self.is_some() && self.val.take(0) |> func();
    }

    fn is_none(self: &Self) -> Bool {
        ret self.val.is_empty();
    }

    fn pass_or[U](self: &Self, error: U) -> Ret[T, U] {
        ret if self.is_some() == {
            true => self.unwrap() |> std::pass();
            else => error |> std::fail();
        };
    }

    fn pass_else(self: &Self, func: Fn[E, ()]) -> Ret[T, E] {
        ret if self.is_some() == {
            true => self.unwrap() |> std::pass();
            else => func() |> std::fail();
        };
    }
}


sup[T] Monad[T] for Opt[T] {
    fn unwrap(self: Self) -> T {
        ret self.val.take(0);
    }

    fn unwrap_or(self: Self, that: T) -> T {
        ret if self.is_some() == {
            true => self.unwrap();
            else => that;
        };
    }

    fn unwrap_else(self: Self, func: Fn[T, ()]) -> T {
        ret if self.is_some() == {
            true => self.unwrap();
            else => func();
        };
    }

    fn map[U](self: Self, func: Fn[U, (T)]) -> Opt[U] {
        ret if self.is_some() == {
            true => self.unwrap() |> func |> some;
            else => std::none();
        };
    }

    fn map_or[U](self: Self, func: Fn[U, (T)], that: U) -> U {
        ret if self.is_some() == {
            true => self.map(func);
            else => that;
        };
    }

    fn map_else[U](self: Self, func: Fn[U, (T)], that: Fn[T, ()]) -> Opt[U] {
        ret if self.is_some() == {
            true => self.map(func);
            else => that();
        };
    }

    fn and_then(self: Self, that: FnOnce[Monad[U], (T)]) -> Opt[U] {
        ret if self.is_some() == {
            true => self |> that;
            else => std::none();
        };
    }

    fn or_else(self: Self, that: Fn[Monad[T], ()]) -> Opt[T] {
        ret if self.is_some() == {
            true => self;
            else => that();
        };
    }
}


sup[T] ops::BinXor for Opt[T] {
    fn __xor__(self: &Self, that: Self) -> Self {
        ret if self.is_some() ^ that.is_some() == {
            self.is_some() => self;
            that.is_some() => that;
            else => std::none();
        };
    }
}
