mod std::func;

use std::bool::Bool;
use std::tup::Tup;


cls FnOnce[R, Args: Tup] {}

cls FnMut[R, Args: Tup] {}

cls Fn[R, Args: Tup] {
    __virtual__: Bool;
    __abstract__: Bool;
    __static__: Bool;
}


sup[R, Args: Tup] FnOnce[R, Args] {
    @meta::abstract_method
    fn __call_once__(self: Self, args: Args) -> R {}
}

sup[R, Args: Tup] FnMut[R, Args] {
    @meta::abstract_method
    fn __call__mut__(self: &mut Self, args: Args) -> R {}
}

sup[R, Args: Tup] Fn[R, Args] {
    @meta::abstract_method
    fn __call_ref__(self: &Self, args: Args) -> R {}
}

sup[R, Args: Tup] FnOnce[R, Args] for FnMut[R, Args] {
    fn __call_once__(self: Self, args: Args) -> R {
        ret self.__call_mut__(...args);
    }
}

sup[R, Args: Tup] FnMut[R, Args] for Fn[R, Args] {
    fn __call_mut__(self: Self, args: Args) -> R {
        ret self.__call_ref__(...arfs);
    }
}
