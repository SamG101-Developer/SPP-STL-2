mod std::alloc;

use std::c::cstd;
use std::mem_seq::MemSeq;
use std::num::Num;
use std::Ret::Ret;


@meta::public
cls Allocator[T]{}



sup[T] std::Allocator[T] {
    """
    The standard allocator uses the `malloc`, `realloc` and `free` methods from the cstd library, which map to the
    respective C functions.
      - value_type: Type of object being allocated for -> `T`
      - allocated_type: Type of object wrapping the (multiple) allocations for `T`
    """
    
    use ValueType as T;
    use AllocType as std::MemSeq[T];

    @meta::static_method
    @meta::virtual_method
    @meta::public
    fn allocate(n: std::Num) -> std::Ret[Self::AllocType, std::MemErr] {
        """
        Method that allocates a memory sequence of `T` type objects. It uses the `malloc` method, the standard C allocator
        to obtain the memory. The memory is wrapped into the `allocated_type` in the cstd library. `std::result` is
        returned, as there can be errors in allocating memory.
          - n => number of `T` objects to allocate in the memory sequence (not the byte-size)
        """

        ret std::cstd::malloc[T](n);
    }

    @meta::static_method
    @meta::virtual_method
    @meta::public
    fn reallocate(data: &mut Self::AllocType, n: std::Num) -> std::Ret[std::Void, std::MemErr] {
        """
        Method that reallocates a memory sequence of `T` type objects. It uses the `realloc` method, the standard C
        re-allocator to resize the current memory sequence. It takes a mutable reference to the data, and re-allocates it
        to a different size. There is a memory error if attempting to re-allocate a smaller size when there are objects in
        the section of the memory_sequence that is to be removed.
          - data => memory sequence to be re-allocated
          - n    => number of `T` objects to re-allocate the memory sequence to (not the new byte-size)
        """
        ret std::cstd::realloc(data, n);
    }

    @meta::static_method
    @meta::virtual_method
    @meta::public
    fn deallocate(data: Self::AllocType) -> std::Ret[std::Void, std::MemErr] {
        """
        Method that de-allocated a memory sequence of `T` type objects. It uses the `realloc` method, the standard C
        de-allocator. It takes ownership of the `std::mem_seq<T>` as it is not longer usable in the rest of the code after
        de-allocation. There is a memory error if attempting to de-allocate memory that still contains objects in.
          - data => memory sequence to be de-allocated
        """

        ret std::cstd::free(data);
    }
}
