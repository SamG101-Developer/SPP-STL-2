@meta::private
mod std::str_backend::rope_str;

use std::alloc::Alloc;
use std::char::Char;
use std::manip::Manip;
use std::mem_seq::MemSeq;
use std::num::Num;
use std::opt;
use std::str_backend::detail::AbsStr;


cls RopeStr[A: Alloc = Alloc, M: Manip = Manip] {
    @meta::protected mut data: MemSeq[Char];
    @meta::protected mut lhs: Opt[Self];
    @meta::protected mut rhs: Opt[Self];
    @meta::protected mut len: Num;
}


sup[A: Alloc, M: Manip] RopeStr[A] {
    @meta::static_method
    fn new(data: MemSeq[Char]) -> Self {
        ret RopeStr{data, lhs=std::none(), rhs=std::none(), len=data.length()};
    }

    @meta::static_method
    fn new(lhs: Self, rhs: Self) -> Self {
        let len = lhs.len + rhs.len;
        # ret RopeStr{data=MemSeq[Char]::new(), lhs, rhs, len}; TODO
    }
}


sup[A: Alloc, M: Manip] AbsStr[A] for RopeStr[A] {
    fn length(self: &Self) -> Num {
        ret self.len.copy();
    }

    fn insert(self: &mut Self, index: Num, that: Self) -> Void {

    }

    fn substring(self: &Self, start: Num, end: Num) -> Self {

    }
}
