mod std::conc::thread;

use std::any::Any;
use std::bool::Bool;
use std::c::C;
use std::fut::Fut;
use std::num::Num;
use std::adt::Ret;
use std::conc::fut::Fut;

use std::opt;
use std::opt::Opt;


cls Thread {
    thread_id: Num;
    is_detached: Bool;
    is_joined: Bool;
    is_alive: Bool;
    auto_join: Bool;
    local: Any;
}


sup Thread {
    @meta::static_method
    fn new(auto_join: Bool = false) -> Thread {
        ret Thread{auto_join, else=Thread::default()};
    }

    fn start[Output, F: FnRef[Output, (Ts)], ...Ts](self: &mut Self, target: F, ...args: Ts) -> Ret[Fut[Output], ThreadErr] {
        let future = Fut::new();
        let lambda = [&mut future, target, args]() => {target(...arguments) |> future.store(_);};

        C::pthread_create(&mut self.thread_id, lambda, &self);
        self.is_alive = true;
        ret std::pass(future);
    }

    fn join(self: &Self) -> Ret[Void, ThreadErr] {
        C::pthread_join(&mut self.thread_id, self)?;
        self.is_alive = false;
    }

    fn detach(self: &Self) -> Ret[Void, ThreadErr] {
        C::pthread_detach(&mut self.thread_id, self)?;
        self.is_detached = true;
    }
}


sup Del for Thread {
    fn __del__(self: &mut Self) -> Void {
        self.join();
    }
}
