mod std::conc::mutex;

use std::c::cstd;


enum MutexLockType {
    IMMEDIATE, DEFER;
}


cls Mutex[T] {
    mutex: std::cstd::pthread_mutex_t;
    object: T;
    lock_type: MutexLockType;
}


sup[T] Mutex[T] {
    @meta::static_method
        fn new(object: T, lock_type: MutexLockType = MutexLockType::DEFER) -> Self {
        ret Mutex{object, lock_type};
    }

        fn acquire(self: &mut Self) -> std::Ret[std::Void] {
        ret std::cstd::pthread_mutex_lock(&self.mutex);
    }

        fn release(self: &mut Self) -> std::Ret[std::Void] {
        ret std::cstd::pthread_mutex_unlock(&self.mutex);
    }
}
