mod std::conc::mutex;

use std::c::cstd;


enum MutexLockType {
    IMMEDIATE, DEFER;
}


cls Mutex[T] {
    mutex: C::PThreadMutexT;
    object: T;
    lock_type: MutexLockType;
}


sup[T] Mutex[T] {
    @meta::static_method
    fn new(object: T, lock_type: MutexLockType = MutexLockType::DEFER) -> Self {
        ret Mutex{object, lock_type};
    }

    fn acquire(self: &mut Self) -> Ret[Void, ThreadErr] {
        ret C::pthread_mutex_lock(&self.mutex);
    }

    fn release(self: &mut Self) -> Ret[Void, ThreadErr] {
        ret C::pthread_mutex_unlock(&self.mutex);
    }
}
